
type Building{
  Name: String
  Spaces: [Space] @cypher(statement:"MATCH (n:Space) RETURN n")
  Assets: [Asset] @cypher(statement:"MATCH (n:Asset) RETURN n")
  AssetTypes: [ElementType] @cypher(statement:"MATCH (n:Asset)-[:IS_OF]->(t) RETURN DISTINCT t")
  Models: [RevitModel] @cypher(statement:"MATCH (n:RevitModel) RETURN n")
  Levels: [Level] @cypher(statement:"MATCH (n:Level) RETURN n")
}

type Level{
  Name: String
  Spaces: [Space] @cypher(statement:"MATCH (this)<-[:IS_ON]-(n:Space) RETURN n")
  Assets: [Asset] @cypher(statement:"MATCH (this)<-[:IS_ON]-(n:Asset) RETURN n")
  Sensors: [Sensor] @cypher(statement:"MATCH (this)<-[:IS_ON]-(n)<-[SENSING]-(s:Sensor) RETURN s")
}


type Space  {
  BIMAbstractID: String @cypher(statement:"MATCH (this) RETURN this.TempId")
  BIMExternalID: String @cypher(statement:"MATCH (this)-[:REALIZED_BY]->(me:ModelElement) return me.UniqueId")
  Number: String
  Name: String
  Area: Float
  Assets: [Asset] @cypher(statement:"MATCH (this)<-[:IS_IN_SPACE]-(d) RETURN d")
  SensedAssets: [Asset] @cypher(statement:"MATCH (this)<-[:IS_IN_SPACE]-(d)<-[SENSING]-(s:Sensor) RETURN d")
  BoundingSurfaces: [Section] @relation(name:"BOUNDED_BY")
  Doors: [Door] @cypher(statement:"MATCH (this)-[:BOUNDED_BY]-(s:Surface)-[:IS_ON]->(d:Door) RETURN d")
  Windows: [Window] @cypher(statement:"MATCH (this)-[:BOUNDED_BY]-(s:Surface)-[:IS_ON]->(d:Window) RETURN d")
  Sensors: [Sensor] @relation(name:"SENSING",direction:IN)
  HasSensors: Boolean
}

type Sensor {
  Name: String
  BIMAbstractID: String @cypher(statement:"MATCH (this) RETURN this.TempId")
  BIMExternalID: String @cypher(statement:"MATCH (this)-[:REALIZED_BY]->(me:ModelElement) return me.UniqueId")
  BIMReference: String @cypher(statement:"MATCH (this) OPTIONAL MATCH (this)-[:IS_ON]->(lvl:Level) OPTIONAL MATCH (this)-[:IS_IN_SPACE]->(sp:Space) OPTIONAL MATCH (this)-[:IS_OF]->(typ:ElementType) OPTIONAL MATCH  (this)-[:REALIZED_BY]->(me:ModelElement) RETURN coalesce(typ.Family_Name, \\\"?\\\") + \\\"~\\\" + coalesce(typ.Name, \\\"\\\") + \\\"~\\\" + coalesce(lvl.Name,\\\"?\\\") + \\\"~\\\" + coalesce(sp.Number,\\\"?\\\") + \\\"~\\\" + coalesce(this.Mark,\\\"\\\")")
  Family_and_Type: String
  Type_Name: String
  SensedAssets: [Asset] @relation(name:"SENSING",direction:OUT)
  BIMSensedExternalId: String
  Device_Name: String
  Data_Metric_Name: String
  Data_Metric_Units: String
  Data_URI: String
  Data_Request_Body: String
  Data_Authentication: String
}


type Asset {
  Name: String
  BIMAbstractID: String @cypher(statement:"MATCH (this) RETURN this.TempId")
  BIMExternalID: String @cypher(statement:"MATCH (this)-[:REALIZED_BY]->(me:ModelElement) return me.UniqueId")
  BIMRevitElementID: Int @cypher(statement:"MATCH (this)-[:REALIZED_BY]->(me:ModelElement)-[isr:IS_IN]->(r:RevitModel) return isr.ModelId")
  BIMReference: String
  BIMReferenceDirective: String @cypher(statement:"MATCH (this) OPTIONAL MATCH (this)-[:IS_ON]->(lvl:Level) OPTIONAL MATCH (this)-[:IS_IN_SPACE]->(sp:Space) OPTIONAL MATCH (this)-[:IS_OF]->(typ:ElementType) OPTIONAL MATCH  (this)-[:REALIZED_BY]->(me:ModelElement) RETURN coalesce(typ.Family_Name, \\\"?\\\") + \\\"~\\\" + coalesce(typ.Name, \\\"?\\\") + \\\"~\\\" + coalesce(lvl.Name,\\\"?\\\") + \\\"~\\\" + coalesce(sp.Number,\\\"?\\\") + \\\"~\\\" + coalesce(this.Mark,\\\"\\\")")
  _internal_id: String @cypher(statement:"MATCH (this) RETURN id(this)")
  Space: Space @relation(name:"IS_IN_SPACE",direction:OUT)
  Labels: [String] @cypher(statement:"MATCH (this) RETURN labels(this)")
  ModelElements: [ModelElement] @relation(name:"REALIZED_BY",direction:OUT)
  Sensors: [Sensor] @relation(name:"SENSING",direction:IN)
  HasSensors: Boolean
  Type: ElementType @relation(name:"IS_OF",direction:OUT)
}

type ElementType {
  Name: String
  ClassificationCode: String
  Category: String
  Type_Name: String
  Family_Name: String
  Description: String
  Assets: [Asset] @relation(name:"IS_OF",direction:IN)
}


type Terminal {
  Name: String
  Spaces: [Space] @relation(name:"IS_IN_SPACE",direction:OUT)
}

type DuctAccessory {
  Name: String
  Spaces: [Space] @relation(name:"IS_IN_SPACE",direction:OUT)
  Sensors: [Sensor] @relation(name:"SENSING",direction:IN)
  Type: [ElementType] @relation(name:"IS_OF",direction:OUT)
}

type Section {
  Name: String
  SectionArea: Float @cypher(statement:"MATCH (this)-[r:BOUNDED_BY]->(e) RETURN r.Area")
  SectionFacingVectorX: [Float] @cypher(statement:"MATCH (this)-[r:BOUNDED_BY]->(e) RETURN r.DirectionX")
  SectionFacingVectorY: [Float] @cypher(statement:"MATCH (this)-[r:BOUNDED_BY]->(e) RETURN r.DirectionY")
  SectionFacingVectorZ: [Float] @cypher(statement:"MATCH (this)-[r:BOUNDED_BY]->(e) RETURN r.DirectionZ")
  Spaces: [Space] @relation(name:"BOUNDED_BY")
  Assets: [Asset] @relation(name:"IS_ON")
}

type RevitModel {
  Project_Name: String
  ModelElements: [ModelElement] @relation(name:"IS_IN",direction:IN)
}

type ModelElement {
  ExternalID: [String]
  Classification: String
  Family: String
  Family_Name: String
  Family_and_Type: String
  RevitModels: [RevitModel] @relation(name:"IS_IN",direction:OUT)
  Assets: [Asset] @relation(name:"REALIZED_BY",direction:IN)
}


type Door {
	Name: String
	Type: [ElementType] @relation(name:"IS_OF",direction:OUT)
	Sensors: [Sensor] @relation(name:"SENSING",direction:IN)
}

type Window {
	Name: String
	Type: [ElementType] @relation(name:"IS_OF",direction:OUT)
	Sensors: [Sensor] @relation(name:"SENSING",direction:IN)
}



type ChangeRequest{
  RequestSource: String
  RequestedBy: String
  RequestedOn: String
  CompletedBy: String
  CompletedOn: String
  IsComplete: Boolean
  Changes: [ParameterChange] @relation(name:"REQUEST",direction:IN)
}

type ParameterChange{
  ParameterName: String
  ChangeSource: Asset @relation(name:"CHANGE",direction:IN)
  OriginalElement: ModelElement @relation(name:"CHANGES",direction:OUT)
  ChangedElement: ModelElement @relation(name:"CHANGED",direction:OUT)
  OldValue: String @cypher(statement:"MATCH (this)-[:CHANGES]->(b) RETURN b[this.ParameterName]")
  NewValue: String @cypher(statement:"MATCH (this)<-[:CHANGE]-(a) RETURN a[this.ParameterName]")
}



type DBPanel{
  Area: Float
  Category: String
  Family: String
  Family_and_Type: String
  Location: String
  LocationX: Float
  LocationY: Float
  LocationZ: Float
  Mark: String
  Name: String
  NominalHeight: Float
  NominalLength: Float
  NominalWidth: Float
  Phase_Created: String
  Phase_Demolished: String
  Rated_Current: Float
  Supply_From: String
  TempId: String
  Type: String
  Type_Id: Int
  Unit_Height: Float
  Unit_Length: Float
  Unit_Width:Float
  Volume: Float
  Workset: Int
  Space: Space @relation(name:"IS_IN_SPACE",direction:OUT)
  Level: Level @relation(name:"IS_ON",direction:OUT)
  OutgoingCircuits: [Circuit] @relation(name:"ELECTRICAL_FLOW_TO",direction:OUT)
  IncommingCircuit: Circuit @relation(name:"ELECTRICAL_FLOW_TO",direction:IN)
}


type Circuit{
  __of_Ground_Conductors: Int 
  __of_Hot_Conductors: Int 
  __of_Neutral_Conductors: Int 
  __of_Runs: Int 
  Apparent_Current: Float
  Apparent_Current_Phase_A: Float 
  Apparent_Current_Phase_B: Float 
  Apparent_Current_Phase_C: Float 
  Apparent_Load: Float 
  Apparent_Load_Phase_A: String 
  Apparent_Load_Phase_B: String 
  Apparent_Load_Phase_C: String 
  Balanced_Load: Float
  Cable_Diameter_Overall_Spacing: Float 
  Cable_Size: Float 
  Category: String 
  Circuit_Number: String 
  Circuit_Protective_Device_Fault_Current_Breaking_Capacity: Float
  Circuit_Protective_Device_Rating: Float 
  Circuit_Protective_Device_Switched_Poles: Int 
  Circuit_Way: Int 
  CPC_Size: Float 
  Design_Option: String 
  Edited_by: String 
  Family: String 
  Family_and_Type: String 
  Frame: Float 
  Image: String 
  Length: Float
  Load_Classification: String 
  Load_Name: String
  Name: String
  Number_of_Elements: Int
  Number_of_Poles: Int 
  Phase_Conductor_Per_Phase: Int 
  Phase_Contuctor_Neutral: String 
  Power_Connected: String 
  Power_Factor: Float 
  Power_Factor_State: Float 
  Rating: Float 
  RCD_Trip_Current: Float 
  Schedule_Circuit_Notes: String 
  System_Type: String 
  TempId: String 
  True_Current: Float
  True_Current_Phase_A: Float
  True_Current_Phase_B: Float 
  True_Current_Phase_C: Float 
  True_Load: Float
  True_Load_Phase_A: Float
  True_Load_Phase_B: Float 
  True_Load_Phase_C: Float 
  Type: String 
  Type_Id: Int 
  Voltage: Float
  Voltage_Drop: Float 
  Wire_Size: String
  Wire_Type: String
  Workset: String 
  Panel: DBPanel @cypher(statement:"MATCH (this)<-[:ELECTRICAL_FLOW_TO]-(panel:DBPanel) RETURN panel")
  Loads: [ElectricalLoad] @relation(name:"ELECTRICAL_FLOW_TO",direction:OUT)
}

type ElectricalLoad{
  Apparent_Load: Float
  Area: Float
  Circuit_Number: String
  Current: Float
  Design_Option: Int
  Edited_by: String
  Electrical_Data: String
  Elevation: Float
  Family: String
  Family_and_Type: String
  HasSensors: Boolean
  Host: String
  Host_Id: Int
  Image: String
  Label_Visible: Boolean
  Lateral_Offset: Float
  Lateral_Offset_Formula: Float
  LocationX: Float
  LocationY: Float
  LocationZ: Float
  Mark: String
  Name: String
  Phase_Created: String
  Phase_Demolished: String
  Power_Factor: Float
  RCD_Trip_Current: Float
  RLX_RlxInstId: Int
  TempId: String
  Type: String
  Type_Id: Int
  Vertical_Offset: Float
  Volume: Float
  Workset: Int
  Category: String
  Space: Space @relation(name:"IS_IN_SPACE",direction:OUT)
  Level: Level @relation(name:"IS_ON",direction:OUT)
  Circuit: Circuit @cypher(statement:"MATCH (this)<-[:ELECTRICAL_FLOW_TO]-(circ:Circuit) RETURN circ")
}