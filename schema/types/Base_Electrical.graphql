
 type DBPanel implements AbstractElement {
  Name: String
  Id: ID!
  ElementType: ElementType @relation(name:"IS_OF",direction:OUT)
  ModelElements: [ModelElement] @relation(name:"REALIZED_BY",direction:OUT)
  Space: Space @relation(name:"IS_IN_SPACE",direction:OUT)
  Level: Level @relation(name:"IS_ON",direction:OUT)
  OutgoingCircuits: [Circuit] @relation(name:"ELECTRICAL_FLOW_TO",direction:OUT)
  IncommingCircuit: Circuit @relation(name:"ELECTRICAL_FLOW_TO",direction:IN)
}

type Circuit implements AbstractElement {
  Name: String
  Id: ID!
  ElementType: ElementType @relation(name:"IS_OF",direction:OUT)
  ModelElements: [ModelElement] @relation(name:"REALIZED_BY",direction:OUT)
  Panel: DBPanel @relation(name:"ELECTRICAL_FLOW_TO",direction:IN)
  Loads: [ElectricalLoad] @relation(name:"ELECTRICAL_FLOW_TO",direction:OUT)
}

type ElectricalLoad implements AbstractElement @additionalLabels(labels: ["AbstractElement"]) {
  Name: String
  Id: ID!
  ElementType: ElementType @relation(name:"IS_OF",direction:OUT)
  ModelElements: [ModelElement] @relation(name:"REALIZED_BY",direction:OUT)
  DBID: String @cypher(statement:"MATCH (this) RETURN id(this)")
  Space: Space @relation(name:"IS_IN_SPACE",direction:OUT)
  Level: Level @relation(name:"IS_ON",direction:OUT)
  Circuit: Circuit @relation(name:"ELECTRICAL_FLOW_TO",direction:IN)
}

type Lighting implements AbstractElement {
  Name: String
  Id: ID!
  ElementType: ElementType @relation(name:"IS_OF",direction:OUT)
  ModelElements: [ModelElement] @relation(name:"REALIZED_BY",direction:OUT)
  Space: Space @relation(name:"IS_IN_SPACE",direction:OUT)
}

type FireAlarm implements AbstractElement {
  Name: String
  Id: ID!
  ElementType: ElementType @relation(name:"IS_OF",direction:OUT)
  ModelElements: [ModelElement] @relation(name:"REALIZED_BY",direction:OUT)
  Space: Space @relation(name:"IS_IN_SPACE",direction:OUT)
}

type Security implements AbstractElement {
  Name: String
  Id: ID!
  ElementType: ElementType @relation(name:"IS_OF",direction:OUT)
  ModelElements: [ModelElement] @relation(name:"REALIZED_BY",direction:OUT)
  Space: Space @relation(name:"IS_IN_SPACE",direction:OUT)
}

type Safety implements AbstractElement {
  Name: String
  Id: ID!
  ElementType: ElementType @relation(name:"IS_OF",direction:OUT)
  ModelElements: [ModelElement] @relation(name:"REALIZED_BY",direction:OUT)
  Space: Space @relation(name:"IS_IN_SPACE",direction:OUT)
}

type Data implements AbstractElement {
  Name: String
  Id: ID!
  ElementType: ElementType @relation(name:"IS_OF",direction:OUT)
  ModelElements: [ModelElement] @relation(name:"REALIZED_BY",direction:OUT)
  Space: Space @relation(name:"IS_IN_SPACE",direction:OUT)
}


type Communications implements AbstractElement {
  Name: String
  Id: ID!
  ElementType: ElementType @relation(name:"IS_OF",direction:OUT)
  ModelElements: [ModelElement] @relation(name:"REALIZED_BY",direction:OUT)
  Space: Space @relation(name:"IS_IN_SPACE",direction:OUT)
}

type Space {
  ElectricalLoadElements: [ElectricalLoad] @relation(name:"IS_IN_SPACE",direction:IN)
  LightingElements: [Lighting] @relation(name:"IS_IN_SPACE",direction:IN)
  FireAlarmElements: [FireAlarm] @relation(name:"IS_IN_SPACE",direction:IN)
  SecurityElements: [Security] @relation(name:"IS_IN_SPACE",direction:IN)
  SafetyElements: [Safety] @relation(name:"IS_IN_SPACE",direction:IN)
  DataElements: [Data] @relation(name:"IS_IN_SPACE",direction:IN)
  DBPanelElements: [DBPanel] @relation(name:"IS_IN_SPACE",direction:IN)
}


